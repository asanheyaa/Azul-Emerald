const burgerMenu = document.querySelector(".burger"), menu = document.querySelector(".header__menu-wrapper"), header = document.querySelector(".header"); function burgerFunction(e) { burgerMenu.classList.toggle("_active"), menu.classList.toggle("_active"), header.classList.toggle("_active"), document.body.classList.toggle("_lock") } function selectMenu() { let e = document.querySelectorAll("[data-select-menu]"); if (e) { function t(e) { let t = e.target.closest("[data-select-menu]"), s = t.querySelector("[data-select-menu-drop-down]"); t.classList.toggle("_active"), o(s, 300) } function s(e) { let t = e.target.closest("[data-select-menu]"), s = t.querySelector("[data-select-menu-value]"), i = t.querySelector("[data-select-menu-drop-down]"), o = this.innerText; s.innerHTML = o, t.classList.remove("_active"), r(i, 300) } document.documentElement.addEventListener("click", function t(s) { let i = s.target.closest("[data-select-menu]"); e.forEach(e => { if (!i || i !== e) { e.classList.remove("_active"); let t = e.querySelector("[data-select-menu-drop-down]"); r(t, 300) } }) }), e.forEach(e => { let r = e.querySelector("[data-select-menu-button]"), i = e.querySelectorAll("[data-select-menu-option]"); r.addEventListener("click", t), i.forEach(e => { e.addEventListener("click", s) }) }); let r = (e, t = 500) => { e.classList.contains("_slide") || (e.classList.add("_slide"), e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = t + "ms", e.style.height = e.offsetHeight + "px", e.offsetHeight, e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, window.setTimeout(() => { e.style.display = "none", e.style.removeProperty("height"), e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property"), e.classList.remove("_slide") }, t)) }, i = (e, t = 500) => { if (!e.classList.contains("_slide")) { e.classList.add("_slide"), e.style.removeProperty("display"); let s = window.getComputedStyle(e).display; "none" === s && (s = "block"), e.style.display = s; let r = e.offsetHeight; e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, e.offsetHeight, e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = t + "ms", e.style.height = r + "px", e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), window.setTimeout(() => { e.style.removeProperty("height"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property"), e.classList.remove("_slide") }, t) } }, o = (e, t = 500) => { if ("none" === window.getComputedStyle(e).display) return i(e, t); r(e, t) } } } function dynamicAdaptiv() { new class e { constructor(e) { this.type = e } init() { this.оbjects = [], this.daClassname = "_dynamic_adapt_", this.nodes = [...document.querySelectorAll("[data-da]")], this.nodes.forEach(e => { let t = e.dataset.da.trim(), s = t.split(","), r = {}; r.element = e, r.parent = e.parentNode, r.destination = document.querySelector(`${s[0].trim()}`), r.breakpoint = s[1] ? s[1].trim() : "767", r.place = s[2] ? s[2].trim() : "last", r.index = this.indexInParent(r.parent, r.element), this.оbjects.push(r) }), this.arraySort(this.оbjects), this.mediaQueries = this.оbjects.map(({ breakpoint: e }) => `(${this.type}-width: ${e}px),${e}`).filter((e, t, s) => s.indexOf(e) === t), this.mediaQueries.forEach(e => { let t = e.split(","), s = window.matchMedia(t[0]), r = t[1], i = this.оbjects.filter(({ breakpoint: e }) => e === r); s.addEventListener("change", () => { this.mediaHandler(s, i) }), this.mediaHandler(s, i) }) } mediaHandler(e, t) { e.matches ? t.forEach(e => { this.moveTo(e.place, e.element, e.destination) }) : t.forEach(({ parent: e, element: t, index: s }) => { t.classList.contains(this.daClassname) && this.moveBack(e, t, s) }) } moveTo(e, t, s) { if (t.classList.add(this.daClassname), "last" === e || e >= s.children.length) { s.append(t); return } if ("first" === e) { s.prepend(t); return } s.children[e].before(t) } moveBack(e, t, s) { t.classList.remove(this.daClassname), void 0 !== e.children[s] ? e.children[s].before(t) : e.append(t) } indexInParent(e, t) { return [...e.children].indexOf(t) } arraySort(e) { if ("min" === this.type) e.sort((e, t) => e.breakpoint === t.breakpoint ? e.place === t.place ? 0 : "first" === e.place || "last" === t.place ? -1 : "last" === e.place || "first" === t.place ? 1 : 0 : e.breakpoint - t.breakpoint); else { e.sort((e, t) => e.breakpoint === t.breakpoint ? e.place === t.place ? 0 : "first" === e.place || "last" === t.place ? 1 : "last" === e.place || "first" === t.place ? -1 : 0 : t.breakpoint - e.breakpoint); return } } }("max").init() } function spollers() { let e = document.querySelectorAll("[data-spollers]"); if (e.length > 0) { let t = Array.from(e).filter(function (e, t, s) { return !e.dataset.spollers.split(",")[0] }); t.length > 0 && o(t) } let s = Array.from(e).filter(function (e, t, s) { return e.dataset.spollers.split(",")[0] }); if (s.length > 0) { let r = []; s.forEach(e => { let t = e.dataset.spollers, s = {}, i = t.split(","); s.value = i[0], s.type = i[1] ? i[1].trim() : "max", s.item = e, r.push(s) }); let i = r.map(e => "(" + e.type + "-width: " + e.value + "px)," + e.value + "," + e.type); (i = i.filter((e, t, s) => s.indexOf(e) === t)).forEach(e => { let t = e.split(","), s = t[1], i = t[2], a = window.matchMedia(t[0]), n = r.filter(e => { if (e.value === s && e.type === i) return !0 }); a.addEventListener("change", function () { o(n, a) }), o(n, a) }) } function o(e, t = !1) { e.forEach(e => { e = t ? e.item : e, t.matches || !t ? (e.classList.add("_init"), a(e), e.addEventListener("click", n)) : (e.classList.remove("_init"), a(e, !1), e.removeEventListener("click", n)) }) } function a(e, t = !0) { let s = e.querySelectorAll("[data-spoller]"); s.length > 0 && s.forEach(e => { t ? (e.removeAttribute("tabindex"), e.classList.contains("_active") || (e.nextElementSibling.hidden = !0)) : (e.setAttribute("tabindex", "-1"), e.nextElementSibling.hidden = !1) }) } function n(e) { let t = e.target; if (t.hasAttribute("data-spoller") || t.closest("[data-spoller]")) { let s = t.hasAttribute("data-spoller") ? t : t.closest("[data-spoller]"), r = s.closest("[data-spollers]"), i = !!r.hasAttribute("data-one-spoller"); r.querySelectorAll("._slide").length || (i && !s.classList.contains("_active") && function e(t) { let s = t.querySelector("[data-spoller]._active"); s && (s.classList.remove("_active"), l(s.nextElementSibling, 500)) }(r), s.classList.toggle("_active"), d(s.nextElementSibling, 500)), e.preventDefault() } } let l = (e, t = 500) => { e.classList.contains("_slide") || (e.classList.add("_slide"), e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = t + "ms", e.style.height = e.offsetHeight + "px", e.offsetHeight, e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, window.setTimeout(() => { e.hidden = !0, e.style.removeProperty("height"), e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property"), e.classList.remove("_slide") }, t)) }, p = (e, t = 500) => { if (!e.classList.contains("_slide")) { e.classList.add("_slide"), e.hidden && (e.hidden = !1); let s = e.offsetHeight; e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, e.offsetHeight, e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = t + "ms", e.style.height = s + "px", e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), window.setTimeout(() => { e.style.removeProperty("height"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property"), e.classList.remove("_slide") }, t) } }, d = (e, t = 500) => { if (e.hidden) return p(e, t); l(e, t) } } burgerMenu.addEventListener("click", burgerFunction), selectMenu(), dynamicAdaptiv(), spollers(); const dateIn = document.querySelector("#date-in"), dateOut = document.querySelector("#date-out"), configs = e => ({ minDate: "today", monthSelectorType: "static", altInput: !0, disableMobile: "true", onOpen() { e.parentElement.classList.add("_active") }, onClose() { e.parentElement.classList.remove("_active") } }); flatpickr(dateIn, configs(dateIn)), flatpickr(dateOut, configs(dateOut)); const swiperHero = new Swiper(".swiper-hero", { loop: !0, pagination: { el: ".swiper-hero__pagination", type: "fraction", renderFraction: function (e, t) { return `<span class="${e} swiper-pagination-box__current"></span><span class="${t} swiper-pagination-box__total"></span>` } }, autoplay: { delay: 5e3 }, allowTouchMove: !1 }), swiperAccomodations = new Swiper(".swiper-accomodations", { loop: !0, autoHeight: !0, pagination: { el: ".swiper-accomodations__pagination", type: "fraction", renderFraction: function (e, t) { return `<span class="${e} swiper-pagination-box__current"></span><span class="${t} swiper-pagination-box__total"></span>` } }, spaceBetween: 15 }), swiperRooms = new Swiper(".swiper-rooms", { autoHeight: !0, navigation: { nextEl: ".rooms-swiper__next", prevEl: ".rooms-swiper__prev" }, spaceBetween: 20, breakpoints: { 450: { slidesPerView: 1, slidesPerGroup: 1, spaceBetween: 47 }, 550: { slidesPerView: 2, slidesPerGroup: 2, spaceBetween: 30 }, 992: { slidesPerView: 3, slidesPerGroup: 3, spaceBetween: 30 } } }), swiperExperencies = new Swiper(".content-experencies__swiper", { slidesPerView: 1.5, loop: !0, speed: 1e4, freeMode: !0, lazy: { loadPrevNext: !0, loadPrevNextAmount: 2 }, spaceBetween: 25, allowTouchMove: !1, touchMoveStopPropagation: !0, autoplay: { delay: 0 }, pagination: { el: ".content-experencies__pagination", type: "fraction", renderFraction: function (e, t) { return `<span class="${e} swiper-pagination-box__current"></span><span class="${t} swiper-pagination-box__total"></span>` } }, breakpoints: { 400: { slidesPerView: 1.2, spaceBetween: 20 }, 768: { slidesPerView: "auto", spaceBetween: 25 } } }), swiperAbout = new Swiper(".content-about__swiper", { autoHeight: !0, navigation: { nextEl: ".about-swiper__next", prevEl: ".about-swiper__prev" }, spaceBetween: 20, breakpoints: { 450: { slidesPerView: 1, slidesPerGroup: 1 }, 768: { spaceBetween: 30 }, 992: { slidesPerView: 2, slidesPerGroup: 2, spaceBetween: 55 } } }), swiperGalleryTop = new Swiper(".top-gallery__swiper", { loop: !0, speed: 1e4, freeMode: !0, lazy: { loadPrevNext: !0, loadPrevNextAmount: 2 }, spaceBetween: 20, allowTouchMove: !1, autoplay: { delay: 0, reverseDirection: !0 }, slidesPerView: 1, breakpoints: { 400: { slidesPerView: 1.2, spaceBetween: 25 }, 768: { slidesPerView: "auto", spaceBetween: 28 } } }), swiperGalleryBottom = new Swiper(".bot-gallery__swiper", { loop: !0, speed: 1e4, freeMode: !0, lazy: { loadPrevNext: !0, loadPrevNextAmount: 2 }, spaceBetween: 20, allowTouchMove: !1, autoplay: { delay: 0 }, slidesPerView: 1, breakpoints: { 400: { slidesPerView: 1.2, spaceBetween: 25 }, 768: { slidesPerView: "auto", spaceBetween: 28 } } });
